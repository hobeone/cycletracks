<% content_for :head do %>

<%= javascript_include_tag "timeplot_ajax/simile-ajax-api" %>
<script type="text/javascript">
  Timeline_urlPrefix='/javascripts/timeplot_js/';
  Timeline_parameters='bundle=true';
  Timeplot_urlPrefix='/javascripts/timeplot_js/';
  Timeplot_parameters='bundle=true';
  SimileAjax.History['enabled'] = false;
</script>

<%= javascript_include_tag "timeplot_js/timeline-api" %>
<%= javascript_include_tag "timeplot_js/timeplot-api" %>
<% end %>

<table width="100%">
  <tr>
    <td align="left" valign="top" width="50%">
        <div id="activity_table">
          <div id="activitySummaryDataComponent" class="activityComponent">
            <div id="activitySummaryTitle">Summary for <%=@activity.name%> (
              <%=
                link_to_remote('delete',
                               :method => :delete,
                               :confirm => 'Are you sure?',
                               :url => activity_url(@activity),
                               :success => update_page{|page| page.redirect_to(:action => 'index') }
                              )%>
                ):</div>
            <div id="activitySummaryContent">
              <div id="startTime">
                <span class="summaryLabel">Start Time:</span>
                <span class="summaryField"><%= @activity.user.to_user_localtime(@activity.start_time).to_formatted_s(:db)  %></span>
              </div>
              <div id="endTime">
                <span class="summaryLabel">End Time:</span>
                <span class="summaryField"><%= @activity.user.to_user_localtime(@activity.end_time).to_formatted_s(:db) %></span>
              </div>
              <div id="totalTime">
                <span class="summaryLabel">Time:</span>
                <span class="summaryField">Total: <%= seconds_to_human_readable(@activity.total_time) %> (Rolling: <%= seconds_to_human_readable(@activity.rolling_time) %>) </span>
              </div>
              <div id="distance">
                <span class="summaryLabel">Distance</span>
                <span class="summaryField"><%= prefered_distance_with_units(@activity.total_meters) %></span>
              </div>
              <div id="ascent">
                <span class="summaryLabel">Ascent:</span>
                <span class="summaryField"><%=prefered_distance_with_units(@activity.total_ascent)%></span>
              </div>
              <div id="descent">
                <span class="summaryLabel">Descent:</span>
                <span class="summaryField"><%=prefered_distance_with_units(@activity.total_descent)%></span>
              </div>
              <div id="speed">
                <span class="summaryLabel">Speed:</span>
                <span class="summaryField">Avg: <%= kph_to_prefered_speed_with_units(@activity.average_speed) %>, Max: <%= kph_to_prefered_speed_with_units @activity.maximum_speed %></span>
              </div>


              <div id="heartRate">
                <span class="summaryLabel">Heart Rate:</span>
                <span class="summaryField">Avg: <%= @activity.average_bpm %>, Max: <%= @activity.maximum_bpm %> bpm</span>
              </div>


              <div id="cadence">
                <span class="summaryLabel">Cadence:</span>
                <span class="summaryField">Avg: <%= @activity.average_cadence %>, Max: <%= @activity.maximum_cadence %> rpm</span>
              </div>


              <div id="calories">
                <span class="summaryLabel">Calories:</span>
                <span class="summaryField"><%= @activity.total_calories %> Cal</span>
              </div>
              <div id="startLocation">
                <span class="summaryLabel">Start Location:</span>
                <span class="summaryField" id="start_location"></span>
              </div>
              <div id="middleLocation">
                <span class="summaryLabel">Middle Location:</span>
                <span class="summaryField" id="mid_location"></span>
              </div>
              <div id="endLocation">
                <span class="summaryLabel">End Location:</span>
                <span class="summaryField" id="end_location"></span>
              </div>
              <div id="uploadedBy">
                <span class="summaryLabel">Uploaded By:</span>
                <span class="summaryField"><%= @activity.user.login %></span>
              </div>
              <% if logged_in? %>
              <div id="public">
                <table>
                  <tr>
                    <td>
                      <span class="summaryLabel">Public:</span>
                    </td>
                    <td>
                      <form>
                        <%= check_box_tag 'public', 'true', @activity.public, :id => 'public_checkbox' %>
                      </form>
                    </td>
                    <td>
                      <span id="public_update_span" style="display:none;">&nbsp; saving...</span>
                    </tr>
                    </tr>
                  </table>
                  <%= observe_field("public_checkbox", :frequency => 1,
                                    :method => :put,
                                    :loading => update_page{|page| page.show 'public_update_span'},
                                    :complete => update_page{|page| page.hide 'public_update_span'},
                                    :with => "'activity[public]=' + value",
                                    :url => activity_url(@activity) + '.json') %>
                                  </div>
              <% end %>



              <div id="comments">
                <table>
                  <tr><td>
                      <span class="summaryLabel">Comment:</span>
                    </td>
                    <td>
                      <% if logged_in? %>
                        <%= editable_content_tag(:span, @activity, 'comment', true, nil, 'click to add a comment', {:class => 'summaryField'}, {:okText => 'save'}) %>
                      <% else %>
                        <%= @activity.comment %>
                      <% end %>
                    </td>
                </tr>
              </table>
              </div>

              <div id="tags">
                <table>
                  <tr>
                    <td>
                      <span class="summaryLabel">Tags:</span>
                    </td>
                    <td>
                      <% if logged_in? %>
                        <%= editable_content_tag(:span, @activity, 'tag_list', true, nil, 'click to add a tag', {:class => 'summaryField'}, {:okText => 'save'}) %>
                      <% else %>
                        <%= @activity.tag_list %>
                      <% end %>
                </td></tr></table>
              </div>
            </div>
          </div>
        </div>
    </td>
    <td>
      <div id="map" style="width: 460px; height: 400px"></div>
      <div>
        <%= activity_google_map_link(@activity) %> -
        <%= link_to 'Public Link', activity_url(@activity) %> -
        <%= link_to 'KML File', activity_url(@activity)+'.kml' %> -
        <%= link_to 'Source File', activity_url(@activity)+'.tcx' %>
      </div>
    </td>
  </tr>
  <tr>
    <td valign="top">
      Altitude (<%=prefered_small_distance_units%>):
      <div id="altitudechart" style="width: 430px; height: 200px"></div>
      Speed (<%= prefered_speed_units %>):
      <div id="speedchart" style="width: 430px; height: 200px"></div>
    </td>
    <td>
      Distance (<%= prefered_distance_units %>):
      <div id="distancechart" style="width: 430px; height: 200px"></div>
      Heart Rate (BPM):
      <div id="bpmchart" style="width: 430px; height: 200px"></div>
      Cadence (RPM):
      <div id="cadencechart" style="width: 430px; height: 200px"></div>
    </td>
  </tr>
</table>
</div>

<br/>

<script type="text/javascript">
  google.load("maps", "2.x");

  function showAddress(response, element_id) {
    if (!response || response.Status.code != 200) {
      document.getElementById(element_id).innerHTML = "Couldn't Reverse Geocode: " + response.Status.code;
    } else {
      place = response.Placemark[0];
      document.getElementById(element_id).innerHTML = place.address;
    }
  }

  function initialize() {
    var map = new google.maps.Map2(document.getElementById("map"));
    map.setMapType(G_PHYSICAL_MAP);
    map.setCenter(new google.maps.LatLng(0,0),0);
    var sw = new google.maps.LatLng(<%= @activity.sw_point.join(',') %>);
    var ne = new google.maps.LatLng(<%= @activity.ne_point.join(',') %>);
    var bounds = new google.maps.LatLngBounds(sw, ne);
    var mapZoomLevel = map.getBoundsZoomLevel(bounds);
    var mapCenter = bounds.getCenter();
    map.setCenter(mapCenter, mapZoomLevel);

    var polyline1_1 = new google.maps.Polyline.fromEncoded({
      weight: 4,
      opacity: 0.6,
      points: <%= @activity.encoded_points.to_json %>,
      levels: <%= @activity.encoded_levels.to_json %>,
      zoomFactor: 2,
      numLevels: 18
    });
    map.addOverlay(polyline1_1);
    map.addControl(new google.maps.SmallMapControl());
    geocoder = new google.maps.ClientGeocoder();

    var start_point = new GLatLng(<%= @activity.start_point.join(',') %> );
    var mid_point = new GLatLng(<%= @activity.mid_point.join(',') %>);
    var end_point = new GLatLng(<%= @activity.end_point.join(',') %>);
    geocoder.getLocations(start_point,
      function(response) {
        showAddress(response, 'start_location');
      }
      );
    geocoder.getLocations(mid_point,
      function(response) {
        showAddress(response, 'mid_location');
      }
      );
    geocoder.getLocations(end_point,
      function(response) {
      showAddress(response, 'end_location');
      }
    );
  }
google.setOnLoadCallback(initialize);

function drawGraphs() {
    var eventSource = new Timeplot.DefaultEventSource();

    var timeGeometry = new Timeplot.DefaultTimeGeometry({
      gridColor: new Timeplot.Color("#000000"),
      axisLabelsPlacement: "top"
    });

    var altitudeGeometry = new Timeplot.DefaultValueGeometry({
      gridColor: "#000000",
      axisLabelsPlacement: "left",
    });
    var speedGeometry = new Timeplot.DefaultValueGeometry({
      gridColor: "#000000",
      axisLabelsPlacement: "left",
      min: 0,
    });
    var distanceGeometry = new Timeplot.DefaultValueGeometry({
      gridColor: "#000000",
      axisLabelsPlacement: "left",
      min: 0,
    });
    var cadenceGeometry = new Timeplot.DefaultValueGeometry({
      gridColor: "#000000",
      axisLabelsPlacement: "left",
      min: 0,
    });
    var bpmGeometry = new Timeplot.DefaultValueGeometry({
      gridColor: "#000000",
      axisLabelsPlacement: "left",
      min: 0,
    });

    var altitudeInfo = [
      Timeplot.createPlotInfo({
        id: "plot1",
        dataSource: new Timeplot.Processor(new Timeplot.ColumnSource(eventSource,1), Timeplot.Operator.average, { size: 3 }),
        valueGeometry: altitudeGeometry,
        timeGeometry: timeGeometry,
        lineColor: "#ff0000",
        fillColor: "#cc8080",
        showValues: true
      }),
      ];
    var speedInfo = [
      Timeplot.createPlotInfo({
        id: "plot2",
        dataSource: new Timeplot.Processor(
          new Timeplot.ColumnSource(eventSource,2),
            Timeplot.Operator.average, { size: 15 }),
        valueGeometry: speedGeometry,
        timeGeometry: timeGeometry,
        lineColor: "#D0A825",
        fillColor: "#D0A825",
        showValues: true
      }),
      ];
    var cadenceInfo = [
      Timeplot.createPlotInfo({
        id: "plot3",
        dataSource: new Timeplot.Processor(
          new Timeplot.ColumnSource(eventSource,3),
            Timeplot.Operator.average, { size: 30 }),
        valueGeometry: cadenceGeometry,
        timeGeometry: timeGeometry,
        lineColor: "#ff0000",
        fillColor: "#cc8080",
        showValues: true
      }),
      ];
    var distanceInfo = [
      Timeplot.createPlotInfo({
        id: "plot4",
        dataSource: new Timeplot.ColumnSource(eventSource,4),
        valueGeometry: distanceGeometry,
        timeGeometry: timeGeometry,
        lineColor: "#99B3CC",
        fillColor: "#99B3CC",
        showValues: true
      }),
      ];
    var bpmInfo = [
      Timeplot.createPlotInfo({
        id: "plot5",
        dataSource: new Timeplot.Processor(
          new Timeplot.ColumnSource(eventSource,5),
            Timeplot.Operator.average, { size: 15 }),
        valueGeometry: bpmGeometry,
        timeGeometry: timeGeometry,
        lineColor: "#99B386",
        fillColor: "#99B386",
        showValues: true
      }),
    ];

    altitudeplot = Timeplot.create(document.getElementById("altitudechart"),
        altitudeInfo);
    speedplot = Timeplot.create(document.getElementById("speedchart"),
        speedInfo);
    cadenceplot = Timeplot.create(document.getElementById("cadencechart"),
        cadenceInfo);
    distanceplot = Timeplot.create(document.getElementById("distancechart"),
        distanceInfo);
    bpmplot = Timeplot.create(document.getElementById("bpmchart"),
        bpmInfo);


    altitudeplot.loadText("/activities/<%=@activity.id%>/data", ",", eventSource);
};

google.setOnLoadCallback(drawGraphs);

</script>
